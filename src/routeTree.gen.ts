/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FilteringWithTanstackQueryRouteRouteImport } from './routes/filtering-with-tanstack-query/route'
import { Route as FilteringRouteRouteImport } from './routes/filtering/route'
import { Route as IndexRouteImport } from './routes/index'

const FilteringWithTanstackQueryRouteRoute =
  FilteringWithTanstackQueryRouteRouteImport.update({
    id: '/filtering-with-tanstack-query',
    path: '/filtering-with-tanstack-query',
    getParentRoute: () => rootRouteImport,
  } as any)
const FilteringRouteRoute = FilteringRouteRouteImport.update({
  id: '/filtering',
  path: '/filtering',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/filtering': typeof FilteringRouteRoute
  '/filtering-with-tanstack-query': typeof FilteringWithTanstackQueryRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/filtering': typeof FilteringRouteRoute
  '/filtering-with-tanstack-query': typeof FilteringWithTanstackQueryRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/filtering': typeof FilteringRouteRoute
  '/filtering-with-tanstack-query': typeof FilteringWithTanstackQueryRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/filtering' | '/filtering-with-tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/filtering' | '/filtering-with-tanstack-query'
  id: '__root__' | '/' | '/filtering' | '/filtering-with-tanstack-query'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FilteringRouteRoute: typeof FilteringRouteRoute
  FilteringWithTanstackQueryRouteRoute: typeof FilteringWithTanstackQueryRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/filtering-with-tanstack-query': {
      id: '/filtering-with-tanstack-query'
      path: '/filtering-with-tanstack-query'
      fullPath: '/filtering-with-tanstack-query'
      preLoaderRoute: typeof FilteringWithTanstackQueryRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/filtering': {
      id: '/filtering'
      path: '/filtering'
      fullPath: '/filtering'
      preLoaderRoute: typeof FilteringRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FilteringRouteRoute: FilteringRouteRoute,
  FilteringWithTanstackQueryRouteRoute: FilteringWithTanstackQueryRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
